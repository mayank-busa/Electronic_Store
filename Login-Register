[HttpPost]
public async Task<IActionResult> LoginForm(LoginModel model)
{
    if (ModelState.IsValid)
    {
        var loginData = new
        {
            email = model.Email,
            password = model.Password,
            role = model.Role
        };

        HttpResponseMessage response = await _httpClient.PostAsJsonAsync("/api/Auth/login", loginData);
        Console.WriteLine($"Status Code: {response.StatusCode}");

        if (response.IsSuccessStatusCode)
        {
            var responseData = await response.Content.ReadFromJsonAsync<AuthResponseModel>();
            if (responseData != null && !string.IsNullOrEmpty(responseData.Token))
            {
                var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, responseData.Email),
            new Claim(ClaimTypes.Role, responseData.Role),
            new Claim("UserId", responseData.UserId.ToString())
        };

                var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var authProperties = new AuthenticationProperties
                {
                    IsPersistent = true
                };

                await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(claimsIdentity), authProperties);

                if (responseData.Role == "admin")
                {
                    return RedirectToAction("Index", "Admin");
                }
                else
                {
                    return RedirectToAction("Index", "Home");
                }
            }
        }
        else
        {
            string errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Login Error: {errorMessage}");
        }

        ViewBag.Error = "Invalid login details.";
    }

    return View(model);
}


//Register
        [HttpPost]
        public async Task<IActionResult> RegisterUser(RegisterModel model)
        {
            //if (!ModelState.IsValid)
            //{
            //    return View(model); // Show form again if validation fails
            //}
            if (!ModelState.IsValid)
            {
                return View("LoginView", new AuthViewModel { Register = model });
            }

            string apiUrl = $"{baseAddress}/Auth/register"; // API endpoint for registration

            var jsonData = JsonConvert.SerializeObject(model);
            var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

            HttpResponseMessage response = await _httpClient.PostAsync(apiUrl, content);

            if (response.IsSuccessStatusCode)
            {
                TempData["SuccessMessage"] = "Registration successful!";
                return RedirectToAction("LoginView");
            }
            //else
            //{
            //    ModelState.AddModelError("", "Registration failed. Please try again.");
            //    return View(model);
            //}
            else
            {
                ModelState.AddModelError("", "Registration failed. Please try again.");
                return View("LoginView", new AuthViewModel { Register = model });
            }
        }
